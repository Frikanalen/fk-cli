// Package fk provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package fk

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	CookieScopes = "cookie.Scopes"
)

// Category defines model for Category.
type Category struct {
	Description *string  `json:"description,omitempty"`
	Id          *float32 `json:"id,omitempty"`
	Key         *string  `json:"key,omitempty"`
	Name        *string  `json:"name,omitempty"`
}

// Config defines model for Config.
type Config struct {
	Categories *[]Category `json:"categories,omitempty"`
	Servers    *struct {
		Media *string `json:"media,omitempty"`
	} `json:"servers,omitempty"`
}

// LoginForm defines model for LoginForm.
type LoginForm struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// NewOrganizationForm defines model for NewOrganizationForm.
type NewOrganizationForm struct {
	// The organization number from the Brønnøysund Register Centre. Must be exactly 9 digits.
	BrregNumber   *int    `json:"brregNumber,omitempty"`
	Homepage      *string `json:"homepage,omitempty"`
	Name          string  `json:"name"`
	PostalAddress string  `json:"postalAddress"`
	StreetAddress string  `json:"streetAddress"`
}

// NewPlaylistForm defines model for NewPlaylistForm.
type NewPlaylistForm struct {
	Description string    `json:"description"`
	Title       string    `json:"title"`
	Videos      []float32 `json:"videos"`
}

// NewVideoForm defines model for NewVideoForm.
type NewVideoForm struct {
	Categories  *[]int  `json:"categories,omitempty"`
	Description *string `json:"description,omitempty"`
	Jukeboxable *bool   `json:"jukeboxable,omitempty"`
	MediaId     int     `json:"mediaId"`
	Title       string  `json:"title"`
}

// Organization defines model for Organization.
type Organization struct {
	Description   *string `json:"description,omitempty"`
	Editor        *User   `json:"editor,omitempty"`
	Homepage      *string `json:"homepage,omitempty"`
	Id            *int    `json:"id,omitempty"`
	Name          *string `json:"name,omitempty"`
	PostalAddress *string `json:"postalAddress,omitempty"`
	StreetAddress *string `json:"streetAddress,omitempty"`
}

// Playlist defines model for Playlist.
type Playlist struct {
	Description *string `json:"description,omitempty"`
	Id          *int    `json:"id,omitempty"`
	Title       *string `json:"title,omitempty"`
}

// RegisterForm defines model for RegisterForm.
type RegisterForm struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	LastName  string              `json:"lastName"`
	Password  string              `json:"password"`
}

// ResourceList defines model for ResourceList.
type ResourceList struct {
	Count  *int                      `json:"count,omitempty"`
	Limit  *int                      `json:"limit,omitempty"`
	Offset *int                      `json:"offset,omitempty"`
	Rows   *[]map[string]interface{} `json:"rows,omitempty"`
}

// User defines model for User.
type User struct {
	CreatedAt   *string              `json:"createdAt,omitempty"`
	Email       *openapi_types.Email `json:"email,omitempty"`
	FirstName   *string              `json:"firstName,omitempty"`
	Id          *int                 `json:"id,omitempty"`
	LastName    *string              `json:"lastName,omitempty"`
	Permissions *[]string            `json:"permissions,omitempty"`
}

// Video defines model for Video.
type Video struct {
	Categories   *[]float32    `json:"categories,omitempty"`
	CreatedAt    *time.Time    `json:"createdAt,omitempty"`
	Description  *string       `json:"description,omitempty"`
	Duration     *float32      `json:"duration,omitempty"`
	Id           *int          `json:"id,omitempty"`
	Jukeboxable  *bool         `json:"jukeboxable,omitempty"`
	Organization *Organization `json:"organization,omitempty"`
	Title        *string       `json:"title,omitempty"`
	UpdatedAt    *time.Time    `json:"updatedAt,omitempty"`
	ViewCount    *float32      `json:"viewCount,omitempty"`
}

// VideoMediaAssetForm defines model for VideoMediaAssetForm.
type VideoMediaAssetForm struct {
	Locator  string                  `json:"locator"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
	Type     string                  `json:"type"`
}

// VideoMediaForm defines model for VideoMediaForm.
type VideoMediaForm struct {
	Duration float32                `json:"duration"`
	FileName string                 `json:"fileName"`
	Locator  string                 `json:"locator"`
	Metadata map[string]interface{} `json:"metadata"`
	UploadId string                 `json:"uploadId"`
}

// Limit defines model for limit.
type Limit int

// Offset defines model for offset.
type Offset int

// AuthenticationRequired defines model for AuthenticationRequired.
type AuthenticationRequired struct {
	Message *string `json:"message,omitempty"`
}

// PermissionDenied defines model for PermissionDenied.
type PermissionDenied struct {
	Details *[]string `json:"details,omitempty"`
	Message *string   `json:"message,omitempty"`
}

// ResourceNotFound defines model for ResourceNotFound.
type ResourceNotFound struct {
	Message *string `json:"message,omitempty"`
}

// LoginUserJSONBody defines parameters for LoginUser.
type LoginUserJSONBody LoginForm

// PostAuthRegisterJSONBody defines parameters for PostAuthRegister.
type PostAuthRegisterJSONBody RegisterForm

// GetOrganizationsParams defines parameters for GetOrganizations.
type GetOrganizationsParams struct {
	// Number of rows to skip
	Offset *Offset `json:"offset,omitempty"`

	// Number of rows to return
	Limit *Limit `json:"limit,omitempty"`

	// An id of the editor (user) to filter by
	Editor *int `json:"editor,omitempty"`
}

// PostOrganizationsJSONBody defines parameters for PostOrganizations.
type PostOrganizationsJSONBody NewOrganizationForm

// PostOrganizationsIdMembersJSONBody defines parameters for PostOrganizationsIdMembers.
type PostOrganizationsIdMembersJSONBody struct {
	Email openapi_types.Email `json:"email"`
}

// PostOrganizationsIdPlaylistsJSONBody defines parameters for PostOrganizationsIdPlaylists.
type PostOrganizationsIdPlaylistsJSONBody NewPlaylistForm

// NewVideoJSONBody defines parameters for NewVideo.
type NewVideoJSONBody NewVideoForm

// GetPlaylistParams defines parameters for GetPlaylist.
type GetPlaylistParams struct {
	// Number of rows to skip
	Offset *Offset `json:"offset,omitempty"`

	// Number of rows to return
	Limit *Limit `json:"limit,omitempty"`

	// An id of the organization to filter by
	Organization *int `json:"organization,omitempty"`
}

// GetVideosParams defines parameters for GetVideos.
type GetVideosParams struct {
	// Number of rows to skip
	Offset *Offset `json:"offset,omitempty"`

	// Number of rows to return
	Limit *Limit `json:"limit,omitempty"`

	// An id of a playlist to filter by. Orders by playlist entry indices.
	InPlaylist *int `json:"inPlaylist,omitempty"`
}

// PostVideosMediaJSONBody defines parameters for PostVideosMedia.
type PostVideosMediaJSONBody VideoMediaForm

// PostVideosMediaIdAssetsJSONBody defines parameters for PostVideosMediaIdAssets.
type PostVideosMediaIdAssetsJSONBody VideoMediaAssetForm

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody LoginUserJSONBody

// PostAuthRegisterJSONRequestBody defines body for PostAuthRegister for application/json ContentType.
type PostAuthRegisterJSONRequestBody PostAuthRegisterJSONBody

// PostOrganizationsJSONRequestBody defines body for PostOrganizations for application/json ContentType.
type PostOrganizationsJSONRequestBody PostOrganizationsJSONBody

// PostOrganizationsIdMembersJSONRequestBody defines body for PostOrganizationsIdMembers for application/json ContentType.
type PostOrganizationsIdMembersJSONRequestBody PostOrganizationsIdMembersJSONBody

// PostOrganizationsIdPlaylistsJSONRequestBody defines body for PostOrganizationsIdPlaylists for application/json ContentType.
type PostOrganizationsIdPlaylistsJSONRequestBody PostOrganizationsIdPlaylistsJSONBody

// NewVideoJSONRequestBody defines body for NewVideo for application/json ContentType.
type NewVideoJSONRequestBody NewVideoJSONBody

// PostVideosMediaJSONRequestBody defines body for PostVideosMedia for application/json ContentType.
type PostVideosMediaJSONRequestBody PostVideosMediaJSONBody

// PostVideosMediaIdAssetsJSONRequestBody defines body for PostVideosMediaIdAssets for application/json ContentType.
type PostVideosMediaIdAssetsJSONRequestBody PostVideosMediaIdAssetsJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// LoginUser request with any body
	LoginUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LoginUser(ctx context.Context, body LoginUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthLogout request
	PostAuthLogout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthRegister request with any body
	PostAuthRegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthRegister(ctx context.Context, body PostAuthRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserProfile request
	UserProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConfig request
	GetConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOpenApiSpecJson request
	GetOpenApiSpecJson(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizations request
	GetOrganizations(ctx context.Context, params *GetOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizations request with any body
	PostOrganizationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizations(ctx context.Context, body PostOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsId request
	GetOrganizationsId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsIdMembers request
	GetOrganizationsIdMembers(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsIdMembers request with any body
	PostOrganizationsIdMembersWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizationsIdMembers(ctx context.Context, id int, body PostOrganizationsIdMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrganizationsIdMembersMember request
	DeleteOrganizationsIdMembersMember(ctx context.Context, id int, member int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsIdPlaylists request with any body
	PostOrganizationsIdPlaylistsWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizationsIdPlaylists(ctx context.Context, id int, body PostOrganizationsIdPlaylistsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NewVideo request with any body
	NewVideoWithBody(ctx context.Context, orgId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NewVideo(ctx context.Context, orgId int, body NewVideoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlaylist request
	GetPlaylist(ctx context.Context, params *GetPlaylistParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlaylistsId request
	GetPlaylistsId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVideos request
	GetVideos(ctx context.Context, params *GetVideosParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVideosMedia request with any body
	PostVideosMediaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVideosMedia(ctx context.Context, body PostVideosMediaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVideosMediaIdAssets request with any body
	PostVideosMediaIdAssetsWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVideosMediaIdAssets(ctx context.Context, id int, body PostVideosMediaIdAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVideosId request
	GetVideosId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) LoginUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoginUser(ctx context.Context, body LoginUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthLogout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthLogoutRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthRegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthRegisterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthRegister(ctx context.Context, body PostAuthRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthRegisterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserProfileRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConfigRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOpenApiSpecJson(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOpenApiSpecJsonRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizations(ctx context.Context, params *GetOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizations(ctx context.Context, body PostOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsIdMembers(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsIdMembersRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsIdMembersWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsIdMembersRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsIdMembers(ctx context.Context, id int, body PostOrganizationsIdMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsIdMembersRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganizationsIdMembersMember(ctx context.Context, id int, member int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationsIdMembersMemberRequest(c.Server, id, member)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsIdPlaylistsWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsIdPlaylistsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsIdPlaylists(ctx context.Context, id int, body PostOrganizationsIdPlaylistsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsIdPlaylistsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NewVideoWithBody(ctx context.Context, orgId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNewVideoRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NewVideo(ctx context.Context, orgId int, body NewVideoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNewVideoRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlaylist(ctx context.Context, params *GetPlaylistParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlaylistRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlaylistsId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlaylistsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVideos(ctx context.Context, params *GetVideosParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVideosRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVideosMediaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVideosMediaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVideosMedia(ctx context.Context, body PostVideosMediaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVideosMediaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVideosMediaIdAssetsWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVideosMediaIdAssetsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVideosMediaIdAssets(ctx context.Context, id int, body PostVideosMediaIdAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVideosMediaIdAssetsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVideosId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVideosIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewLoginUserRequest calls the generic LoginUser builder with application/json body
func NewLoginUserRequest(server string, body LoginUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLoginUserRequestWithBody(server, "application/json", bodyReader)
}

// NewLoginUserRequestWithBody generates requests for LoginUser with any type of body
func NewLoginUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAuthLogoutRequest generates requests for PostAuthLogout
func NewPostAuthLogoutRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/logout")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAuthRegisterRequest calls the generic PostAuthRegister builder with application/json body
func NewPostAuthRegisterRequest(server string, body PostAuthRegisterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthRegisterRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAuthRegisterRequestWithBody generates requests for PostAuthRegister with any type of body
func NewPostAuthRegisterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/register")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUserProfileRequest generates requests for UserProfile
func NewUserProfileRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConfigRequest generates requests for GetConfig
func NewGetConfigRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOpenApiSpecJsonRequest generates requests for GetOpenApiSpecJson
func NewGetOpenApiSpecJsonRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/open-api-spec.json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationsRequest generates requests for GetOrganizations
func NewGetOrganizationsRequest(server string, params *GetOrganizationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Editor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "editor", runtime.ParamLocationQuery, *params.Editor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrganizationsRequest calls the generic PostOrganizations builder with application/json body
func NewPostOrganizationsRequest(server string, body PostOrganizationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostOrganizationsRequestWithBody generates requests for PostOrganizations with any type of body
func NewPostOrganizationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrganizationsIdRequest generates requests for GetOrganizationsId
func NewGetOrganizationsIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationsIdMembersRequest generates requests for GetOrganizationsIdMembers
func NewGetOrganizationsIdMembersRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/members", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrganizationsIdMembersRequest calls the generic PostOrganizationsIdMembers builder with application/json body
func NewPostOrganizationsIdMembersRequest(server string, id int, body PostOrganizationsIdMembersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsIdMembersRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostOrganizationsIdMembersRequestWithBody generates requests for PostOrganizationsIdMembers with any type of body
func NewPostOrganizationsIdMembersRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/members", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrganizationsIdMembersMemberRequest generates requests for DeleteOrganizationsIdMembersMember
func NewDeleteOrganizationsIdMembersMemberRequest(server string, id int, member int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "member", runtime.ParamLocationPath, member)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/members/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrganizationsIdPlaylistsRequest calls the generic PostOrganizationsIdPlaylists builder with application/json body
func NewPostOrganizationsIdPlaylistsRequest(server string, id int, body PostOrganizationsIdPlaylistsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsIdPlaylistsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostOrganizationsIdPlaylistsRequestWithBody generates requests for PostOrganizationsIdPlaylists with any type of body
func NewPostOrganizationsIdPlaylistsRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/playlists", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNewVideoRequest calls the generic NewVideo builder with application/json body
func NewNewVideoRequest(server string, orgId int, body NewVideoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNewVideoRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewNewVideoRequestWithBody generates requests for NewVideo with any type of body
func NewNewVideoRequestWithBody(server string, orgId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/videos", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPlaylistRequest generates requests for GetPlaylist
func NewGetPlaylistRequest(server string, params *GetPlaylistParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/playlist")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Organization != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization", runtime.ParamLocationQuery, *params.Organization); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlaylistsIdRequest generates requests for GetPlaylistsId
func NewGetPlaylistsIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/playlists/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVideosRequest generates requests for GetVideos
func NewGetVideosRequest(server string, params *GetVideosParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/videos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InPlaylist != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "inPlaylist", runtime.ParamLocationQuery, *params.InPlaylist); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostVideosMediaRequest calls the generic PostVideosMedia builder with application/json body
func NewPostVideosMediaRequest(server string, body PostVideosMediaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVideosMediaRequestWithBody(server, "application/json", bodyReader)
}

// NewPostVideosMediaRequestWithBody generates requests for PostVideosMedia with any type of body
func NewPostVideosMediaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/videos/media")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostVideosMediaIdAssetsRequest calls the generic PostVideosMediaIdAssets builder with application/json body
func NewPostVideosMediaIdAssetsRequest(server string, id int, body PostVideosMediaIdAssetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVideosMediaIdAssetsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostVideosMediaIdAssetsRequestWithBody generates requests for PostVideosMediaIdAssets with any type of body
func NewPostVideosMediaIdAssetsRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/videos/media/%s/assets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVideosIdRequest generates requests for GetVideosId
func NewGetVideosIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/videos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// LoginUser request with any body
	LoginUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginUserResponse, error)

	LoginUserWithResponse(ctx context.Context, body LoginUserJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginUserResponse, error)

	// PostAuthLogout request
	PostAuthLogoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAuthLogoutResponse, error)

	// PostAuthRegister request with any body
	PostAuthRegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthRegisterResponse, error)

	PostAuthRegisterWithResponse(ctx context.Context, body PostAuthRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthRegisterResponse, error)

	// UserProfile request
	UserProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UserProfileResponse, error)

	// GetConfig request
	GetConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConfigResponse, error)

	// GetOpenApiSpecJson request
	GetOpenApiSpecJsonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenApiSpecJsonResponse, error)

	// GetOrganizations request
	GetOrganizationsWithResponse(ctx context.Context, params *GetOrganizationsParams, reqEditors ...RequestEditorFn) (*GetOrganizationsResponse, error)

	// PostOrganizations request with any body
	PostOrganizationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsResponse, error)

	PostOrganizationsWithResponse(ctx context.Context, body PostOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsResponse, error)

	// GetOrganizationsId request
	GetOrganizationsIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetOrganizationsIdResponse, error)

	// GetOrganizationsIdMembers request
	GetOrganizationsIdMembersWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetOrganizationsIdMembersResponse, error)

	// PostOrganizationsIdMembers request with any body
	PostOrganizationsIdMembersWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsIdMembersResponse, error)

	PostOrganizationsIdMembersWithResponse(ctx context.Context, id int, body PostOrganizationsIdMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsIdMembersResponse, error)

	// DeleteOrganizationsIdMembersMember request
	DeleteOrganizationsIdMembersMemberWithResponse(ctx context.Context, id int, member int, reqEditors ...RequestEditorFn) (*DeleteOrganizationsIdMembersMemberResponse, error)

	// PostOrganizationsIdPlaylists request with any body
	PostOrganizationsIdPlaylistsWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsIdPlaylistsResponse, error)

	PostOrganizationsIdPlaylistsWithResponse(ctx context.Context, id int, body PostOrganizationsIdPlaylistsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsIdPlaylistsResponse, error)

	// NewVideo request with any body
	NewVideoWithBodyWithResponse(ctx context.Context, orgId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NewVideoResponse, error)

	NewVideoWithResponse(ctx context.Context, orgId int, body NewVideoJSONRequestBody, reqEditors ...RequestEditorFn) (*NewVideoResponse, error)

	// GetPlaylist request
	GetPlaylistWithResponse(ctx context.Context, params *GetPlaylistParams, reqEditors ...RequestEditorFn) (*GetPlaylistResponse, error)

	// GetPlaylistsId request
	GetPlaylistsIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetPlaylistsIdResponse, error)

	// GetVideos request
	GetVideosWithResponse(ctx context.Context, params *GetVideosParams, reqEditors ...RequestEditorFn) (*GetVideosResponse, error)

	// PostVideosMedia request with any body
	PostVideosMediaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVideosMediaResponse, error)

	PostVideosMediaWithResponse(ctx context.Context, body PostVideosMediaJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVideosMediaResponse, error)

	// PostVideosMediaIdAssets request with any body
	PostVideosMediaIdAssetsWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVideosMediaIdAssetsResponse, error)

	PostVideosMediaIdAssetsWithResponse(ctx context.Context, id int, body PostVideosMediaIdAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVideosMediaIdAssetsResponse, error)

	// GetVideosId request
	GetVideosIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetVideosIdResponse, error)
}

type LoginUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r LoginUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthLogoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostAuthLogoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthLogoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthRegisterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
		User    *User   `json:"user,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostAuthRegisterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthRegisterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Authenticated *bool `json:"authenticated,omitempty"`
		User          *User `json:"user,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r UserProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Config
}

// Status returns HTTPResponse.Status
func (r GetConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOpenApiSpecJsonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetOpenApiSpecJsonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOpenApiSpecJsonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ResourceList)
		ResourceList `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Rows *[]Organization `json:"rows,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Organization
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Organization
	JSON404      *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsIdMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ResourceList)
		ResourceList `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Rows *[]User `json:"rows,omitempty"`
	}
	JSON401 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON403 *struct {
		Details *[]string `json:"details,omitempty"`
		Message *string   `json:"message,omitempty"`
	}
	JSON404 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsIdMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsIdMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsIdMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON404 *struct {
		Details *string `json:"details,omitempty"`
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsIdMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsIdMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrganizationsIdMembersMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrganizationsIdMembersMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrganizationsIdMembersMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsIdPlaylistsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Playlist
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsIdPlaylistsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsIdPlaylistsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NewVideoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Video
}

// Status returns HTTPResponse.Status
func (r NewVideoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NewVideoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlaylistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ResourceList)
		ResourceList `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Rows *[]Playlist `json:"rows,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetPlaylistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlaylistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlaylistsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Playlist
	JSON404      *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetPlaylistsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlaylistsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVideosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/ResourceList)
		ResourceList `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Rows *[]Video `json:"rows,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetVideosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVideosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVideosMediaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Id *float32 `json:"id,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostVideosMediaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVideosMediaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVideosMediaIdAssetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Id *float32 `json:"id,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostVideosMediaIdAssetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVideosMediaIdAssetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVideosIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Video
	JSON404      *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetVideosIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVideosIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// LoginUserWithBodyWithResponse request with arbitrary body returning *LoginUserResponse
func (c *ClientWithResponses) LoginUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginUserResponse, error) {
	rsp, err := c.LoginUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginUserResponse(rsp)
}

func (c *ClientWithResponses) LoginUserWithResponse(ctx context.Context, body LoginUserJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginUserResponse, error) {
	rsp, err := c.LoginUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginUserResponse(rsp)
}

// PostAuthLogoutWithResponse request returning *PostAuthLogoutResponse
func (c *ClientWithResponses) PostAuthLogoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAuthLogoutResponse, error) {
	rsp, err := c.PostAuthLogout(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthLogoutResponse(rsp)
}

// PostAuthRegisterWithBodyWithResponse request with arbitrary body returning *PostAuthRegisterResponse
func (c *ClientWithResponses) PostAuthRegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthRegisterResponse, error) {
	rsp, err := c.PostAuthRegisterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthRegisterResponse(rsp)
}

func (c *ClientWithResponses) PostAuthRegisterWithResponse(ctx context.Context, body PostAuthRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthRegisterResponse, error) {
	rsp, err := c.PostAuthRegister(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthRegisterResponse(rsp)
}

// UserProfileWithResponse request returning *UserProfileResponse
func (c *ClientWithResponses) UserProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UserProfileResponse, error) {
	rsp, err := c.UserProfile(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserProfileResponse(rsp)
}

// GetConfigWithResponse request returning *GetConfigResponse
func (c *ClientWithResponses) GetConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConfigResponse, error) {
	rsp, err := c.GetConfig(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConfigResponse(rsp)
}

// GetOpenApiSpecJsonWithResponse request returning *GetOpenApiSpecJsonResponse
func (c *ClientWithResponses) GetOpenApiSpecJsonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenApiSpecJsonResponse, error) {
	rsp, err := c.GetOpenApiSpecJson(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOpenApiSpecJsonResponse(rsp)
}

// GetOrganizationsWithResponse request returning *GetOrganizationsResponse
func (c *ClientWithResponses) GetOrganizationsWithResponse(ctx context.Context, params *GetOrganizationsParams, reqEditors ...RequestEditorFn) (*GetOrganizationsResponse, error) {
	rsp, err := c.GetOrganizations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsResponse(rsp)
}

// PostOrganizationsWithBodyWithResponse request with arbitrary body returning *PostOrganizationsResponse
func (c *ClientWithResponses) PostOrganizationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsResponse, error) {
	rsp, err := c.PostOrganizationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsWithResponse(ctx context.Context, body PostOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsResponse, error) {
	rsp, err := c.PostOrganizations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsResponse(rsp)
}

// GetOrganizationsIdWithResponse request returning *GetOrganizationsIdResponse
func (c *ClientWithResponses) GetOrganizationsIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetOrganizationsIdResponse, error) {
	rsp, err := c.GetOrganizationsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsIdResponse(rsp)
}

// GetOrganizationsIdMembersWithResponse request returning *GetOrganizationsIdMembersResponse
func (c *ClientWithResponses) GetOrganizationsIdMembersWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetOrganizationsIdMembersResponse, error) {
	rsp, err := c.GetOrganizationsIdMembers(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsIdMembersResponse(rsp)
}

// PostOrganizationsIdMembersWithBodyWithResponse request with arbitrary body returning *PostOrganizationsIdMembersResponse
func (c *ClientWithResponses) PostOrganizationsIdMembersWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsIdMembersResponse, error) {
	rsp, err := c.PostOrganizationsIdMembersWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsIdMembersResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsIdMembersWithResponse(ctx context.Context, id int, body PostOrganizationsIdMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsIdMembersResponse, error) {
	rsp, err := c.PostOrganizationsIdMembers(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsIdMembersResponse(rsp)
}

// DeleteOrganizationsIdMembersMemberWithResponse request returning *DeleteOrganizationsIdMembersMemberResponse
func (c *ClientWithResponses) DeleteOrganizationsIdMembersMemberWithResponse(ctx context.Context, id int, member int, reqEditors ...RequestEditorFn) (*DeleteOrganizationsIdMembersMemberResponse, error) {
	rsp, err := c.DeleteOrganizationsIdMembersMember(ctx, id, member, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationsIdMembersMemberResponse(rsp)
}

// PostOrganizationsIdPlaylistsWithBodyWithResponse request with arbitrary body returning *PostOrganizationsIdPlaylistsResponse
func (c *ClientWithResponses) PostOrganizationsIdPlaylistsWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsIdPlaylistsResponse, error) {
	rsp, err := c.PostOrganizationsIdPlaylistsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsIdPlaylistsResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsIdPlaylistsWithResponse(ctx context.Context, id int, body PostOrganizationsIdPlaylistsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsIdPlaylistsResponse, error) {
	rsp, err := c.PostOrganizationsIdPlaylists(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsIdPlaylistsResponse(rsp)
}

// NewVideoWithBodyWithResponse request with arbitrary body returning *NewVideoResponse
func (c *ClientWithResponses) NewVideoWithBodyWithResponse(ctx context.Context, orgId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NewVideoResponse, error) {
	rsp, err := c.NewVideoWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNewVideoResponse(rsp)
}

func (c *ClientWithResponses) NewVideoWithResponse(ctx context.Context, orgId int, body NewVideoJSONRequestBody, reqEditors ...RequestEditorFn) (*NewVideoResponse, error) {
	rsp, err := c.NewVideo(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNewVideoResponse(rsp)
}

// GetPlaylistWithResponse request returning *GetPlaylistResponse
func (c *ClientWithResponses) GetPlaylistWithResponse(ctx context.Context, params *GetPlaylistParams, reqEditors ...RequestEditorFn) (*GetPlaylistResponse, error) {
	rsp, err := c.GetPlaylist(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlaylistResponse(rsp)
}

// GetPlaylistsIdWithResponse request returning *GetPlaylistsIdResponse
func (c *ClientWithResponses) GetPlaylistsIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetPlaylistsIdResponse, error) {
	rsp, err := c.GetPlaylistsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlaylistsIdResponse(rsp)
}

// GetVideosWithResponse request returning *GetVideosResponse
func (c *ClientWithResponses) GetVideosWithResponse(ctx context.Context, params *GetVideosParams, reqEditors ...RequestEditorFn) (*GetVideosResponse, error) {
	rsp, err := c.GetVideos(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVideosResponse(rsp)
}

// PostVideosMediaWithBodyWithResponse request with arbitrary body returning *PostVideosMediaResponse
func (c *ClientWithResponses) PostVideosMediaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVideosMediaResponse, error) {
	rsp, err := c.PostVideosMediaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVideosMediaResponse(rsp)
}

func (c *ClientWithResponses) PostVideosMediaWithResponse(ctx context.Context, body PostVideosMediaJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVideosMediaResponse, error) {
	rsp, err := c.PostVideosMedia(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVideosMediaResponse(rsp)
}

// PostVideosMediaIdAssetsWithBodyWithResponse request with arbitrary body returning *PostVideosMediaIdAssetsResponse
func (c *ClientWithResponses) PostVideosMediaIdAssetsWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVideosMediaIdAssetsResponse, error) {
	rsp, err := c.PostVideosMediaIdAssetsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVideosMediaIdAssetsResponse(rsp)
}

func (c *ClientWithResponses) PostVideosMediaIdAssetsWithResponse(ctx context.Context, id int, body PostVideosMediaIdAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVideosMediaIdAssetsResponse, error) {
	rsp, err := c.PostVideosMediaIdAssets(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVideosMediaIdAssetsResponse(rsp)
}

// GetVideosIdWithResponse request returning *GetVideosIdResponse
func (c *ClientWithResponses) GetVideosIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetVideosIdResponse, error) {
	rsp, err := c.GetVideosId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVideosIdResponse(rsp)
}

// ParseLoginUserResponse parses an HTTP response from a LoginUserWithResponse call
func ParseLoginUserResponse(rsp *http.Response) (*LoginUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAuthLogoutResponse parses an HTTP response from a PostAuthLogoutWithResponse call
func ParsePostAuthLogoutResponse(rsp *http.Response) (*PostAuthLogoutResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthLogoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAuthRegisterResponse parses an HTTP response from a PostAuthRegisterWithResponse call
func ParsePostAuthRegisterResponse(rsp *http.Response) (*PostAuthRegisterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthRegisterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
			User    *User   `json:"user,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUserProfileResponse parses an HTTP response from a UserProfileWithResponse call
func ParseUserProfileResponse(rsp *http.Response) (*UserProfileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Authenticated *bool `json:"authenticated,omitempty"`
			User          *User `json:"user,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConfigResponse parses an HTTP response from a GetConfigWithResponse call
func ParseGetConfigResponse(rsp *http.Response) (*GetConfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Config
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOpenApiSpecJsonResponse parses an HTTP response from a GetOpenApiSpecJsonWithResponse call
func ParseGetOpenApiSpecJsonResponse(rsp *http.Response) (*GetOpenApiSpecJsonResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOpenApiSpecJsonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOrganizationsResponse parses an HTTP response from a GetOrganizationsWithResponse call
func ParseGetOrganizationsResponse(rsp *http.Response) (*GetOrganizationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ResourceList)
			ResourceList `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Rows *[]Organization `json:"rows,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostOrganizationsResponse parses an HTTP response from a PostOrganizationsWithResponse call
func ParsePostOrganizationsResponse(rsp *http.Response) (*PostOrganizationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrganizationsIdResponse parses an HTTP response from a GetOrganizationsIdWithResponse call
func ParseGetOrganizationsIdResponse(rsp *http.Response) (*GetOrganizationsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrganizationsIdMembersResponse parses an HTTP response from a GetOrganizationsIdMembersWithResponse call
func ParseGetOrganizationsIdMembersResponse(rsp *http.Response) (*GetOrganizationsIdMembersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsIdMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ResourceList)
			ResourceList `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Rows *[]User `json:"rows,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Details *[]string `json:"details,omitempty"`
			Message *string   `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostOrganizationsIdMembersResponse parses an HTTP response from a PostOrganizationsIdMembersWithResponse call
func ParsePostOrganizationsIdMembersResponse(rsp *http.Response) (*PostOrganizationsIdMembersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsIdMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Details *string `json:"details,omitempty"`
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteOrganizationsIdMembersMemberResponse parses an HTTP response from a DeleteOrganizationsIdMembersMemberWithResponse call
func ParseDeleteOrganizationsIdMembersMemberResponse(rsp *http.Response) (*DeleteOrganizationsIdMembersMemberResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrganizationsIdMembersMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostOrganizationsIdPlaylistsResponse parses an HTTP response from a PostOrganizationsIdPlaylistsWithResponse call
func ParsePostOrganizationsIdPlaylistsResponse(rsp *http.Response) (*PostOrganizationsIdPlaylistsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsIdPlaylistsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Playlist
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNewVideoResponse parses an HTTP response from a NewVideoWithResponse call
func ParseNewVideoResponse(rsp *http.Response) (*NewVideoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NewVideoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Video
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetPlaylistResponse parses an HTTP response from a GetPlaylistWithResponse call
func ParseGetPlaylistResponse(rsp *http.Response) (*GetPlaylistResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlaylistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ResourceList)
			ResourceList `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Rows *[]Playlist `json:"rows,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPlaylistsIdResponse parses an HTTP response from a GetPlaylistsIdWithResponse call
func ParseGetPlaylistsIdResponse(rsp *http.Response) (*GetPlaylistsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlaylistsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Playlist
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetVideosResponse parses an HTTP response from a GetVideosWithResponse call
func ParseGetVideosResponse(rsp *http.Response) (*GetVideosResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVideosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/ResourceList)
			ResourceList `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Rows *[]Video `json:"rows,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostVideosMediaResponse parses an HTTP response from a PostVideosMediaWithResponse call
func ParsePostVideosMediaResponse(rsp *http.Response) (*PostVideosMediaResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostVideosMediaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Id *float32 `json:"id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePostVideosMediaIdAssetsResponse parses an HTTP response from a PostVideosMediaIdAssetsWithResponse call
func ParsePostVideosMediaIdAssetsResponse(rsp *http.Response) (*PostVideosMediaIdAssetsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostVideosMediaIdAssetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Id *float32 `json:"id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetVideosIdResponse parses an HTTP response from a GetVideosIdWithResponse call
func ParseGetVideosIdResponse(rsp *http.Response) (*GetVideosIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVideosIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Video
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Log in with existing user
	// (POST /auth/login)
	LoginUser(ctx echo.Context) error
	// Log out of the currently logged in user (if any)
	// (POST /auth/logout)
	PostAuthLogout(ctx echo.Context) error
	// Register a new user
	// (POST /auth/register)
	PostAuthRegister(ctx echo.Context) error
	// Get information about the logged in user
	// (GET /auth/user)
	UserProfile(ctx echo.Context) error
	// Get core data and config
	// (GET /config)
	GetConfig(ctx echo.Context) error
	// Get OpenAPI specification
	// (GET /open-api-spec.json)
	GetOpenApiSpecJson(ctx echo.Context) error
	// Get a list of organizations
	// (GET /organizations)
	GetOrganizations(ctx echo.Context, params GetOrganizationsParams) error
	// Create a new organization
	// (POST /organizations)
	PostOrganizations(ctx echo.Context) error
	// Get a specific organization by id
	// (GET /organizations/{id})
	GetOrganizationsId(ctx echo.Context, id int) error
	// Get a list of members for an organization
	// (GET /organizations/{id}/members)
	GetOrganizationsIdMembers(ctx echo.Context, id int) error
	// Add a user as a member to an organization
	// (POST /organizations/{id}/members)
	PostOrganizationsIdMembers(ctx echo.Context, id int) error
	// Remove a member from an organization
	// (DELETE /organizations/{id}/members/{member})
	DeleteOrganizationsIdMembersMember(ctx echo.Context, id int, member int) error
	// Create a new playlist for an organization
	// (POST /organizations/{id}/playlists)
	PostOrganizationsIdPlaylists(ctx echo.Context, id int) error
	// Create a new video for an organization
	// (POST /organizations/{orgId}/videos)
	NewVideo(ctx echo.Context, orgId int) error
	// Get a list of playlists
	// (GET /playlist)
	GetPlaylist(ctx echo.Context, params GetPlaylistParams) error
	// Get a specific playlist by id
	// (GET /playlists/{id})
	GetPlaylistsId(ctx echo.Context, id int) error
	// Get a list of videos
	// (GET /videos)
	GetVideos(ctx echo.Context, params GetVideosParams) error
	// Internally create a video media entry
	// (POST /videos/media)
	PostVideosMedia(ctx echo.Context) error
	// Internally create a video media asset entry
	// (POST /videos/media/{id}/assets)
	PostVideosMediaIdAssets(ctx echo.Context, id int) error
	// Get a specific video by id
	// (GET /videos/{id})
	GetVideosId(ctx echo.Context, id int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// LoginUser converts echo context to params.
func (w *ServerInterfaceWrapper) LoginUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LoginUser(ctx)
	return err
}

// PostAuthLogout converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthLogout(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthLogout(ctx)
	return err
}

// PostAuthRegister converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthRegister(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthRegister(ctx)
	return err
}

// UserProfile converts echo context to params.
func (w *ServerInterfaceWrapper) UserProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UserProfile(ctx)
	return err
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetOpenApiSpecJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenApiSpecJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenApiSpecJson(ctx)
	return err
}

// GetOrganizations converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrganizations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOrganizationsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "editor" -------------

	err = runtime.BindQueryParameter("form", true, false, "editor", ctx.QueryParams(), &params.Editor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter editor: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOrganizations(ctx, params)
	return err
}

// PostOrganizations converts echo context to params.
func (w *ServerInterfaceWrapper) PostOrganizations(ctx echo.Context) error {
	var err error

	ctx.Set(CookieScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostOrganizations(ctx)
	return err
}

// GetOrganizationsId converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrganizationsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOrganizationsId(ctx, id)
	return err
}

// GetOrganizationsIdMembers converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrganizationsIdMembers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOrganizationsIdMembers(ctx, id)
	return err
}

// PostOrganizationsIdMembers converts echo context to params.
func (w *ServerInterfaceWrapper) PostOrganizationsIdMembers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostOrganizationsIdMembers(ctx, id)
	return err
}

// DeleteOrganizationsIdMembersMember converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteOrganizationsIdMembersMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "member" -------------
	var member int

	err = runtime.BindStyledParameterWithLocation("simple", false, "member", runtime.ParamLocationPath, ctx.Param("member"), &member)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter member: %s", err))
	}

	ctx.Set(CookieScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteOrganizationsIdMembersMember(ctx, id, member)
	return err
}

// PostOrganizationsIdPlaylists converts echo context to params.
func (w *ServerInterfaceWrapper) PostOrganizationsIdPlaylists(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostOrganizationsIdPlaylists(ctx, id)
	return err
}

// NewVideo converts echo context to params.
func (w *ServerInterfaceWrapper) NewVideo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orgId" -------------
	var orgId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "orgId", runtime.ParamLocationPath, ctx.Param("orgId"), &orgId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	ctx.Set(CookieScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NewVideo(ctx, orgId)
	return err
}

// GetPlaylist converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlaylist(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPlaylistParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "organization" -------------

	err = runtime.BindQueryParameter("form", true, false, "organization", ctx.QueryParams(), &params.Organization)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organization: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPlaylist(ctx, params)
	return err
}

// GetPlaylistsId converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlaylistsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPlaylistsId(ctx, id)
	return err
}

// GetVideos converts echo context to params.
func (w *ServerInterfaceWrapper) GetVideos(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVideosParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "inPlaylist" -------------

	err = runtime.BindQueryParameter("form", true, false, "inPlaylist", ctx.QueryParams(), &params.InPlaylist)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter inPlaylist: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVideos(ctx, params)
	return err
}

// PostVideosMedia converts echo context to params.
func (w *ServerInterfaceWrapper) PostVideosMedia(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVideosMedia(ctx)
	return err
}

// PostVideosMediaIdAssets converts echo context to params.
func (w *ServerInterfaceWrapper) PostVideosMediaIdAssets(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVideosMediaIdAssets(ctx, id)
	return err
}

// GetVideosId converts echo context to params.
func (w *ServerInterfaceWrapper) GetVideosId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVideosId(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/login", wrapper.LoginUser)
	router.POST(baseURL+"/auth/logout", wrapper.PostAuthLogout)
	router.POST(baseURL+"/auth/register", wrapper.PostAuthRegister)
	router.GET(baseURL+"/auth/user", wrapper.UserProfile)
	router.GET(baseURL+"/config", wrapper.GetConfig)
	router.GET(baseURL+"/open-api-spec.json", wrapper.GetOpenApiSpecJson)
	router.GET(baseURL+"/organizations", wrapper.GetOrganizations)
	router.POST(baseURL+"/organizations", wrapper.PostOrganizations)
	router.GET(baseURL+"/organizations/:id", wrapper.GetOrganizationsId)
	router.GET(baseURL+"/organizations/:id/members", wrapper.GetOrganizationsIdMembers)
	router.POST(baseURL+"/organizations/:id/members", wrapper.PostOrganizationsIdMembers)
	router.DELETE(baseURL+"/organizations/:id/members/:member", wrapper.DeleteOrganizationsIdMembersMember)
	router.POST(baseURL+"/organizations/:id/playlists", wrapper.PostOrganizationsIdPlaylists)
	router.POST(baseURL+"/organizations/:orgId/videos", wrapper.NewVideo)
	router.GET(baseURL+"/playlist", wrapper.GetPlaylist)
	router.GET(baseURL+"/playlists/:id", wrapper.GetPlaylistsId)
	router.GET(baseURL+"/videos", wrapper.GetVideos)
	router.POST(baseURL+"/videos/media", wrapper.PostVideosMedia)
	router.POST(baseURL+"/videos/media/:id/assets", wrapper.PostVideosMediaIdAssets)
	router.GET(baseURL+"/videos/:id", wrapper.GetVideosId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xbaVMjNxr+K6reVAVqG5thMqnFX6YckkmRnQEK2KR2wZvIrde2QrfUkdSAQ/l/5Xv+",
	"2JaOvtV2czhsMl/G3a3jPZ73lHgIIp6knAFTMhg9BCkWOAEFwjzFNKFK/yAgI0FTRTkLRsFJlkxBID5D",
	"gt9JpDgSoDLBgjCg+vsvGYhlEAYMJxCM3CphIKMFJNguN8NZrILRuzBI8D1NsiQYvdsPg4Qy+/AmDNQy",
	"1bMpUzAHEaxWYcBnMwm9CJI3NO0gxy3ipWe/Qs+bff2vQtO+h6ZVGAiQKWcSjMTGmVoAUzTCmrRz+CWj",
	"Aoj+EnGmgBnicZrGbsTwZ6k5eKgQkwqeglDULpiAlHgONSobuyCRbxMGcI+TNIa1YxwTUgnK5kau7g2f",
	"/gyRslzVBdxYjMpiPTTjAqmFewNSBaswOAORUCkpZ18Do8/in4DCNDY/C96ugn/zDCWZVGgKSC0AcTHH",
	"jP5qqQNClSaKI8KRWmCtaz2BARAzenz5zacfj05PLs9PPyLBY0BpQXAwCQOqIDE7NiRVCAoLgZf62aud",
	"kntELPtVvfi+PkEjmiHC2ecKLfCtFUKhkpIbYwspiBkXidUSjswCqzA4B8kzEcEJVx94xl4cpCdcoZlZ",
	"uMp+9e0T2L50fIJUQJBwLKA7LBErVtbTLKmGuiOsYM7F0geuytoedVNSec2Mk9Gvb2DpHW4dzMNmvsLg",
	"iLMZnbcpiiyt7qkA4mcCZsEo+Nuw9NZDx+GwYM+DTwni1vnypsYIxb1o9VH/kc8p+8BF0l4YEkxj/UND",
	"Dmsc2DdhW1wplvKOC1IbXbz0waNwYqOrYtliwsRD6AncnVZcg5/kqRAwtyGkHVoum97FwgDNBE+M1X0l",
	"fv+Nsd9/W8qMEXQOcyoVCHQETAkYoE/OS8E9jlS8RIeI0DlVclC1isPDN18efvnuzUE7woTBgieQOusq",
	"xJQJy7tSIDSZw//u7CyUSnfk+933u6Pr6+H19XD3/c7V3Q+Th7er6+vB7vsrvPfreO8/+3uH19d7g8nf",
	"r68H7tXk4SBc7TSed99/NvSpLUd5gu8/ApurRTA6ePfOxMn8+a1P21wqHI8JESD9zlUqAaC6RzQAYOho",
	"rttcpQMUZzFexlQqPyA2uQVFVQzeL7eUAK+bbst71G20wZRduu71imU7mPlef/Vz0uFO2iBrOo5NIvg5",
	"u4Epv8fTmiCmnMeAmY2MhOJj0rFbhwA7hJGv5eO/at6P16RNFTZ52H/JjZa4PnRUWO+IES9kHy3x5EB/",
	"Zuzrp7vW7rk3fGyoaLqWFnEzKqQ66XBErdExfsTgTVFpjdv7x6NjVpWTCp0TryxtrvPRq82IZzZtayus",
	"KOLan8p6qv1NV1I+p1FS1HJkrRHGcNq0CsAKyFj5TbJ/AlFDQW8AV9HQ1n6ZOvuY76oEfMwbt/xYl9wV",
	"JsK61ArZEKxgT1EDnxaNm0ycZAI3Ppb7W/EVKcrBl77cZGMY4A33vM7N1lx51dOU1cMHQW8wgxgYOmYz",
	"nsb4xpR3LdaylDxWWrcU7o4aZpSLo1O/n3RoGksJHalEzCPsIkxrwwQUJljhNca1KULmy7vxk7VkdiQ7",
	"60AwozF02sqTecvSmGNSSw46+Cv2DyusFhRXtqksOvGVMBKiTFC1vNBYy10mv6GGM9Mlco9Fm2h2syfB",
	"tgRKY0zpP2Fp61LKZrxdLpx/c3E5y2I0Pjs2nZGIM5kllM0RZgRpyxG6AmdzdEfVAlk84xjMJhbvQflS",
	"L6PTPxDSLn8w2B/sG7tKgeGUBqPgrXllaoGF4WuIM7UYxrpEM9rm0tMx+0HvjpHMogik1BTnbawQLXmG",
	"7mgc67Il5vM5aMItvbrgkSlEdEaBoEyCMHxhKemcAUEYMbhDRxfnH5DiN8B0laPBZvSlFW5LRxMXrKZB",
	"qq84WT6q+bDOiZSl6aoOJiUyaHbrDvb3X6br8YROhiHUNC5KJWjNfrH/pq2uYxZxISBSRuYaoYgLVKQR",
	"BuFZkmCxtCsXCoN7Kg3cMityhedSG1a9oRdM9AoFcHimqsipK/CMS6Vnf7Tj/r8kyjPVEmlLNnoQnxks",
	"R5kQwHRdXgLdoHqHzhBmy91eIhMuzd2KuWmDeoqh5XrKc/At2VstxX9FkwuDzCWbmyu5vo1GI3YNJ5d7",
	"WfM8bKv3G52hIioRjgVgsnQwamCv6A3hQqm94JUzNvcdfZybkxdpoNLEME+oUvqFxjJny4RncneAji32",
	"f1pgWTajf0LmmASZAyDNSiaBhIizeKmBq7DKJIo4AYNDpwd7EKAJMNtKBZi0kaiFfia4juUv6y5wKTIg",
	"/vzzZUFxUbVfY0vGDZcd/bnArADKfltbF0XsrEwiHCT7XFlf3RkCOs5zGgTYIwW0Y/SmE5CGlncbmPwW",
	"FNKZjE6Q9Xw81d6xDaZNQI2KfrYXpZcLKhEwknLKlIOM8dLax1E2l0g7bdOsRgsulY5wMkRlrRQa2HG1",
	"AIESLrXH1pikEdLpXxtz34JyLfZnIm5t593u0OE9rEi0o89i5RF7xAUY6g1rUU5tIeY0dbLVud4eTume",
	"zrwGOYlOzi22T1Ng45RqpH0nTfLq479NrkvrrCBCrffvLk5PkIXGwEO/2ejsuD7Rz0ClsJNraa8NDGun",
	"0Vd+XZRDhq6bsQo3jrQtET2wYWMMUZLnBu4YcUfDfxcpjmY01t57uuw4WHbNxOrBcuu8ePJMOOI4Pp11",
	"CqMMypVekWaz7jdbrZ1HVeUbGh8T3/Exiqk0SVcdCm1Q4Y6RJaxq9Exc49SfpjbhtI38x3fCtIU0qL+G",
	"2tKvfq+nM5XC2GAqL4mvJhqopWaOzASXt9RaOp16adn98IGSVW/jPybBK0pszOpcmpj8RdeqBZnD1pG6",
	"D+C5v6wfK06XiJK1MK/7QuOAdM1f+h9Kgibs1vsiv46GCSRTd2jcU1ef3Iw/nXPLT3ae59R0hJCVxG09",
	"SDquCJnpbzdPb92teR44+5h/3TE7eJjsErOe7mAr+O3t++sIfVoQeOI1B+8J0MRba/SKGGuqVEwIEJ1I",
	"Y6ejF4HkFy98ecuK4EfKbnFMia8RXynyq/eGHKO2L4IVMuvYokk+/TKRd9FGRdbXTsaEIOyaNaUWdOrY",
	"207Wu+Thg/2xssKNQUEb/V+b93782/961wSOAQ0uAQm/BVLee6kHyL4iOjfLlLIxy72qFwm9qySloJ4d",
	"T1N3Bt+6YPvHu8GzgpStZcO1qzV/cCZc3HbwGHv+7QUy4FyhjwmBlasYXivnYn5MVsPyAtFmoJgpL4SV",
	"/BrR9nBR3lLqBYo3L7a35cuDCPPhBeBgdPY4LFiaLBDSyhWdrny7wM4r90RqJUuPlkhDGn+pxkjpbJ5b",
	"P5QBYl1DJK347hxWDZ9SDNlYbBeBYLuF9jqHPGYFS1sqsAs/3SyuK2LbWmFdevIuHXxvR7yiSeNSRFVj",
	"HqBTQXSJN12WA4ApsUSUERqBub3ss3fKKp7qL2XtLoo819QdKtbZ+W0Oixyt1WBhPw6L6/vdmZ9Fl7n4",
	"s6Wg3rhZtIWwXteX968x+tR5NtAbmbXDfaGFY6ZAMBzHSzcAYRfa7UxjAD3UYpN+LCW8SsZf0fsxGVsq",
	"tq3/8gLcnwMERjnPgIKd3wMQm8KwVdZ2Y3Bn/ju2PG0p+Fp5NSNvLqPthN3qXzxdNaPemeAkM3/95k6a",
	"g9Bc3h8FC6VSORoOZ8XFuwHjQ5zS4e1BoK3NUf+QU9Y4Al9NVv8LAAD//xIDPHFIOwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
